// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An ingredient identification AI agent.
 *
 * - identifyIngredients - A function that handles the ingredient identification process.
 * - IdentifyIngredientsInput - The input type for the identifyIngredients function.
 * - IdentifyIngredientsOutput - The return type for the identifyIngredients function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const IdentifyIngredientsInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo of ingredients, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type IdentifyIngredientsInput = z.infer<typeof IdentifyIngredientsInputSchema>;

const IdentifyIngredientsOutputSchema = z.object({
  ingredients: z
    .array(z.string())
    .describe('A list of identified ingredients and their quantities.'),
});
export type IdentifyIngredientsOutput = z.infer<typeof IdentifyIngredientsOutputSchema>;

export async function identifyIngredients(input: IdentifyIngredientsInput): Promise<IdentifyIngredientsOutput> {
  return identifyIngredientsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'identifyIngredientsPrompt',
  input: {schema: IdentifyIngredientsInputSchema},
  output: {schema: IdentifyIngredientsOutputSchema},
  prompt: `You are an expert chef specializing in identifying ingredients from photos.

You will use this information to identify the ingredients and their quantities in the photo.

Respond with a list of ingredients and their quantities.

Photo: {{media url=photoDataUri}}`,
});

const identifyIngredientsFlow = ai.defineFlow(
  {
    name: 'identifyIngredientsFlow',
    inputSchema: IdentifyIngredientsInputSchema,
    outputSchema: IdentifyIngredientsOutputSchema,
  },
  async input => {
    try {
      const {output} = await prompt(input);
      if (!output || !output.ingredients) {
        // If the model returns nothing or an invalid structure for ingredients,
        // return an empty list, which is valid per the schema.
        // The calling action already checks for an empty ingredients list.
        console.warn('IdentifyIngredientsFlow: LLM output was null or missing ingredients. Returning empty list.');
        return { ingredients: [] };
      }
      return output; // Output is valid and contains an ingredients array (possibly empty)
    } catch (e) {
      console.error("Error in identifyIngredientsFlow's prompt execution:", e);
      // Return a schema-compliant response indicating no ingredients were found.
      return { ingredients: [] };
    }
  }
);
